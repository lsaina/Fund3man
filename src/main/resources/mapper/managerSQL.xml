<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="manager">
<select id="totalSellerCount" parameterType="map" resultType="int">
	
	select count(*) from 
	(select 
		seller_no as sellerNo,
		member_id as memberId,
		en_no as enNo,
		en_path as enPath,
		en_type as enType,
		en_intro as enIntro,
		owner,
		photopath,
		position,
		address,
		auth_seller as authSeller,
		auth_massage as authMessage
	from seller where
	<choose>
		<when test="type == 0">
			auth_seller=0 
		</when>
		<when test="type == 1">
			auth_seller=1 
		</when>
		<when test="type == 2">
			auth_seller=2 
		</when>
		<otherwise>
			1=1 
		</otherwise>
	</choose>
	
	<if test="!keyword.equals('')">
		and member_id like '%'||#{keyword}||'%'
	</if>
	order by 1 desc
	)

	
</select>
<select id="selectSellerForManager" parameterType="map" resultType="sel">
	select 
		seller_no as sellerNo,
		member_id as memberId,
		en_no as enNo,
		en_path as enPath,
		en_type as enType,
		en_intro as enIntro,
		owner,
		photopath,
		position,
		address,
		auth_seller as authSeller,
		auth_massage as authMessage
	from seller where
	<choose>
		<when test="type == 0">
			auth_seller=0 
		</when>
		<when test="type == 1">
			auth_seller=1 
		</when>
		<when test="type == 2">
			auth_seller=2 
		</when>
		<otherwise>
			1=1 
		</otherwise>
	</choose>
	
	<if test="!keyword.equals('')">
		and member_id like '%'||#{keyword}||'%'
	</if>
	order by 1 desc

</select>
<update id="changeMemberAuth" parameterType="map">
	update member_tbl set category_no=#{categoryNo} where member_id=#{memberId}
</update>
<update id="changeSellerAuth" parameterType="sel">
	update seller set auth_seller=#{authSeller}, auth_massage=#{authMessage} where seller_no=#{sellerNo}
</update>
<select id="moreSeller" parameterType="map" resultType="sel">
	
	select * from (select rownum as rnum, s.* from 
	(select 
		seller_no as sellerNo,
		member_id as memberId,
		en_no as enNo,
		en_path as enPath,
		en_type as enType,
		en_intro as enIntro,
		owner,
		photopath,
		position,
		address,
		auth_seller as authSeller,
		auth_massage as authMessage
	from seller where
	<choose>
		<when test="type == 0">
			auth_seller=0 
		</when>
		<when test="type == 1">
			auth_seller=1 
		</when>
		<when test="type == 2">
			auth_seller=2 
		</when>
		<otherwise>
			1=1 
		</otherwise>
	</choose>
	
	<if test="!keyword.equals('')">
		and member_id like '%'||#{keyword}||'%'
	</if>
	order by 1 desc
	)
	s) where rnum between #{start} and #{end}

</select>
<select id="selectAllMember" parameterType="map" resultType="m">
	
	select * from (select rownum as rnum, m.* from 
	(select 
		member_id as memberId,
		member_pw as memberPw,
		member_Name as memberName,
		member_no as memberNo,
		mem_phone as memPhone,
		mem_email as memEmail,
		gender,
		category_no as categoryNo,
		report,
		auth_re as authRe,
		mem_comment as memComment,
		member_warning as memberWarning
	from member_tbl where
	
	<choose>
		<when test="type.equals('report')">
			report<![CDATA[>]]> 0 
		</when>
		<otherwise>
			1=1 
		</otherwise>
	</choose>
	
	<if test="!keyword.equals('')">
		and member_id like '%'||#{keyword}||'%'
	</if>
	order by 1 desc)
	m) where rnum between #{start} and #{end}

</select>
<select id="selectMemberCount" parameterType="map" resultType="int">
	select count(*) from
	(select 
		member_id as memberId,
		member_pw as memberPw,
		member_Name as memberName,
		member_no as memberNo,
		mem_phone as memPhone,
		mem_email as memEmail,
		gender,
		category_no as categoryNo,
		report,
		auth_re as authRe,
		mem_comment as memComment
	from member_tbl where
	
	<choose>
		<when test="type.equals('report')">
			report<![CDATA[>]]> 0 
		</when>
		<otherwise>
			1=1 
		</otherwise>
	</choose>
	
	<if test="!keyword.equals('')">
		and member_id like '%'||#{keyword}||'%'
	</if>
	)
	
</select>
<select id="selectOneStar" parameterType="string" resultType="ss">
	select 
    	star_no as starNo,
        store_no as storeNo,
        storepay_no as storepayNo,
        store_product as storeProduct,
        member_id as memberId,
        star_date as starDate,
        star_score as starScore,
        star_content as starContent,
        store_reportcount as storeReportcount
	from store_star where member_id=#{memberId} and store_reportcount<![CDATA[>]]>0
	
</select>
<select id="selectAllFund" parameterType="map" resultType="f">
	select * from (select rownum as rnum, m.* from 
	(select
  		fund_no as fundNo,
  		member_id as memberId,
  		fund_name as fundName,
  		fund_category as fundCategory,
  		fund_reportcount as fundReportcount,
  		fund_warning as fundWarning
  	from fund where
	
	<choose>
		<when test="type.equals('report')">
			fund_reportcount<![CDATA[>]]> 0 
		</when>
		<otherwise>
			1=1 
		</otherwise>
	</choose>
	
	<if test="!keyword.equals('')">
		and fund_name like '%'||#{keyword}||'%'
	</if>
	order by 1 desc)
	m) where rnum between #{start} and #{end}

</select>
<select id="selectFundCount" parameterType="map" resultType="int">
	select count(*) from
	(	select 
		fund_no as fundNo,
  		member_id as memberId,
  		fund_name as fundName,
  		fund_amount as fundAmount,
  		fund_fees as fundFees,
  		fund_category as fundCategory,
  		fund_start as fundStart,
  		fund_end as fundEnd,
  		fund_intro as fundIntro,
  		fund_as as fundAs,
  		fund_like as fundLike,
  		fund_reportcount as fundReportcount,
  		fund_warning as fundWarning,
  		fund_filepath1 as fundFilepath1,
  		fund_filepath2 as fundFilepath2,
  		fund_filepath3 as fundFilepath3,
  		fund_filepath4 as fundFilepath4,
  		fund_filepath5 as fundFilepath5
  	from fund where
	
	<choose>
		<when test="type.equals('report')">
			fund_reportcount<![CDATA[>]]> 0 
		</when>
		<otherwise>
			1=1 
		</otherwise>
	</choose>
	
	<if test="!keyword.equals('')">
		and fund_name like '%'||#{keyword}||'%'
	</if>
	)

</select>
<select id="selectAllStore" parameterType="map" resultType="s">
	select * from (select rownum as rnum, m.* from 
	( select
	  		store_no as storeNo,
	  		member_id as memberId,
	  		store_title as storeTitle,
	  		store_category as storeCategory,
	  		store_reportcount as storeReportcount,
	  		store_warning as storeWarning
	  	from store where
	
	<choose>
		<when test="type.equals('report')">
			store_reportcount<![CDATA[>]]> 0 
		</when>
		<otherwise>
			1=1 
		</otherwise>
	</choose>
	
	<if test="!keyword.equals('')">
		and store_title like '%'||#{keyword}||'%'
	</if>
	order by 1 desc)
	m) where rnum between #{start} and #{end}

</select>
<select id="selectStoreCount" parameterType="map" resultType="int">

	select count(*) from
	(	select
	  		store_no as storeNo,
	  		member_id as memberId,
	  		store_title as storeTitle,
	  		store_category as storeCategory,
	  		store_content as storeContent,
	  		store_product as storeProduct,
	  		store_productcontent as storeProductcontent,
	  		store_price as storePrice,
	  		store_count as storeCount,
	  		store_delivery as storeDelivery,
	  		store_return as storeReturn,
	  		store_change as storeChange,
	  		store_reportcount as storeReportcount,
	  		store_warning as storeWarning,
	  		store_img1 as storeImg1,
	  		store_img2 as storeImg2,
	  		store_img3 as storeImg3,
	  		store_img4 as storeImg4,
	  		store_img5 as storeImg5
	  	from store where
	
	<choose>
		<when test="type.equals('report')">
			store_reportcount<![CDATA[>]]> 0 
		</when>
		<otherwise>
			1=1 
		</otherwise>
	</choose>
	
	<if test="!keyword.equals('')">
		and store_title like '%'||#{keyword}||'%'
	</if>
	)
</select>

<select id="selectOneFund" parameterType="int" resultType="f">
	select
  		fund_no as fundNo,
  		member_id as memberId,
  		fund_name as fundName,
  		fund_amount as fundAmount,
  		fund_fees as fundFees,
  		fund_category as fundCategory,
  		fund_start as fundStart,
  		fund_end as fundEnd,
  		fund_intro as fundIntro,
  		fund_as as fundAs,
  		fund_like as fundLike,
  		fund_reportcount as fundReportcount,
  		fund_warning as fundWarning,
  		fund_filepath1 as fundFilepath1,
  		fund_filepath2 as fundFilepath2,
  		fund_filepath3 as fundFilepath3,
  		fund_filepath4 as fundFilepath4,
  		fund_filepath5 as fundFilepath5
  	from fund where fund_no=#{fundNo}

</select>
<select id="selectOneStore" parameterType="int" resultType="s">
	select
	  		store_no as storeNo,
	  		member_id as memberId,
	  		store_title as storeTitle,
	  		store_category as storeCategory,
	  		store_content as storeContent,
	  		store_product as storeProduct,
	  		store_productcontent as storeProductcontent,
	  		store_price as storePrice,
	  		store_count as storeCount,
	  		store_delivery as storeDelivery,
	  		store_return as storeReturn,
	  		store_change as storeChange,
	  		store_reportcount as storeReportcount,
	  		store_warning as storeWarning,
	  		store_img1 as storeImg1,
	  		store_img2 as storeImg2,
	  		store_img3 as storeImg3,
	  		store_img4 as storeImg4,
	  		store_img5 as storeImg5
	  	from store where store_no=#{storeNo}
</select>
<select id="selectOneMember" parameterType="int" resultType="m">
	select 
		member_id as memberId,
		member_pw as memberPw,
		member_Name as memberName,
		member_no as memberNo,
		mem_phone as memPhone,
		mem_email as memEmail,
		gender,
		category_no as categoryNo,
		report,
		auth_re as authRe,
		mem_comment as memComment
	from member_tbl where member_no=#{memberNo}

</select>
<select id="selectReportList" parameterType="map" resultType="d">
	select 
 			dm_no as dmNo,
 			send_mem_id as sendMemId,
 			recv_mem_id as recvMemId,
 			m_title as mTitle,
 			m_content as mContent,
 			m_datetime as mDatetime,
 			m_rectime as mRectime,
 			read_ck as readCk,
 			warning,
 			category,
 			category_no as categoryNo
 			from message where 
 			send_mem_id = 'admin'
 			and recv_mem_id =#{memberId}
 			and category = #{category}
 			<choose>
 				<when test="category==1">
 					and category_no = #{categoryNo}
 				</when>
 				<when test="category==2">
 					and category_no = #{categoryNo}
 				</when>
 			</choose>
 			order by read_ck desc, dm_no desc 

</select>
<update id="updateMemberAuth" parameterType="map">
	update member_tbl set auth_re=#{auth}, report=0 where member_id=#{memberId}
</update>

<!--스토어 삭제(스토어페이 상태 결제취소/쿠폰상태 사용전으로) -->
<update id="cancelStorePay" parameterType="int">
	update storePay set storepay_check=1 where store_no=#{storeNo}
</update>
<update id="updateCouponUse" parameterType="int">
	update member_coupon set coupon_use=0, use_date=null where mem_coupon_no in (select mem_coupon_no from storePay where store_no=#{storeNo})
</update>
<delete id="deleteStore" parameterType="int">
	delete from store where store_no=#{storeNo}
</delete>
<!-- 펀드 삭제 -->
<update id="cancelFundPay" parameterType="int">
	update fund_pay set fpay_status=1 where fund_no=#{fundNo}
</update>
<update id="updateFundCouponUse" parameterType="int">
	update member_coupon set coupon_use=0, use_date=null where mem_coupon_no in (select mem_coupon_no from fund_pay where fund_no=#{fundNo})
</update>
<delete id="deleteFund" parameterType="int">
	delete from fund where fund_no=#{fundNo}
</delete>

<!-- 회원 신고해제 -->
<update id="cancelReviewReport" parameterType="string">
	update store_star set store_reportcount=0 where member_id=#{memberId} and store_reportcount<![CDATA[>]]>0
</update>
<update id="cacelMemberReport" parameterType="string">
	update member_tbl set report=0 where member_id=#{memberId}
</update>

<!-- 펀드 신고해제 -->
<update id="cancelFundReport" parameterType="int">
	update fund set fund_reportcount=0 where fund_no=#{fundNo}
</update>
<!-- 스토어 신고해제 -->
<update id="cancelStoreReport" parameterType="int">
	update store set store_reportcount=0 where store_no=#{storeNo}
</update>

</mapper>











